[,] maxSat
MAX-3SAT
<p>The <a href="https://github.com/optimizationBenchmarking/documentation-examples/blob/master/data/maxSat/README.md">MAX-3SAT</a> example data set contains results from a few simple experiments on the, well, <a href="https://en.wikipedia.org/wiki/MAX-3SAT">MAX-3SAT</a> problem. The MAX-3SAT problem is a well-known combinatorial optimization problem, where the goal is to find a bit string which makes a certain Boolean expression become true (here: by minimizing the number of false clauses in said expression).</p><p>We investigate six simple <a href="https://en.wikipedia.org/wiki/Hill_climbing">Hill Climbing</a> algorithms on 100 of the satisfiable <a href="http://www.cs.ubc.ca/~hoos/SATLIB/benchm.html">SATLIB</a> benchmark instances.</p>

[,] bbob
(Numerical) Black-Box Optimization Benchmarking (BBOB) 2013
The Black-Box-Optimization-Benchmarking (BBOB) workshops are a series of events where black-box numerical optimization algorithms are compared on a set of numerical benchmark problems by using the COmparing Continuous Optimisers (<a href="http://coco.gforge.inria.fr/">COCO</a>) software. In <a href="https://github.com/optimizationBenchmarking/documentation-examples/blob/master/data/bbob/README.md">this example</a>, we use some of the noiseless <a href="http://coco.gforge.inria.fr/doku.php?id=bbob-2013-algorithms">data sets</a> from <a href="http://coco.gforge.inria.fr/doku.php?id=bbob-2013">BBOB 2013</a> which took place at the 15th Annual Conference on Genetic and Evolutionary Computation (<a href="http://sigevo.org/gecco-2013/">GECCO'13</a>).

[,] tspSuite
Traveling Salesman Problem
<p>Here we provide an example data set from several algorithms solving the Traveling Salesman Problem (<a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem">TSP</a>) gathered with the <a href="https://github.com/optimizationBenchmarking/tspSuite">TSP Suite</a>. The TSP Suite is the direct predecessor of the  <em>optimizationBenchmarking.org</em> framework. Here we conduct experiments based on the 68 smallest-scale symmetric benchmark instances from the <a href="www.iwr.uni-heidelberg.de/groups/comopt/software/TSPLIB95/">TSPLib</a> benchmark set.</p><p>The <a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem">TSP</a> is maybe the oldest and most well-known combinatorial optimization problem. Given are <em>n</em> cities. A salesman starts at one of these cities. He wants to visit all other cities (each exactly once) and then return to his origin. The question for the shortest tour that he can take to realize this travel is <a href="https://en.wikipedia.org/wiki/NP-hard">NP-hard</a> and the best exact algorithms for solving this problem need a runtime exponential in <em>n</em> to find the best-possible solution in the worst case.</p><p>As benchmark problems for our TSP example, we use some instances from the well-known <a href="www.iwr.uni-heidelberg.de/groups/comopt/software/TSPLIB95/">TSPLib</a>. We pick the 68 smallest-scale instances from 110 symmetric instances to run out experiments.</p><p>Here we investigate twelve <em>anytime optimization</em> methods for the TSP, i.e., algorithms that can step-wise improve their best guess of the solution. They can provide an approximate solution at any time. Among the tested algorithms, you can find 11 <a href="https://en.wikipedia.org/wiki/Metaheuristic">metaheuristics</a> and one <a href="https://en.wikipedia.org/wiki/Branch_and_bound">branch and bound</a> algorithm.</p>